import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { ethers } from 'ethers';
import qs from 'qs';
import { useState } from 'react';
import { Fragment} from 'react'
import { Listbox, Transition } from '@headlessui/react'
import { CheckIcon, ChevronUpDownIcon } from '@heroicons/react/20/solid'
export default function Home() {

  const [connected, setConnected] = useState(false);
  const [provider,setProvider] = useState(null);
  const [account,setAccount] = useState(null);

  const people = [
    { name: 'Wade Cooper' },
    { name: 'Arlene Mccoy' },
    { name: 'Devon Webb' },
    { name: 'Tom Cook' },
    { name: 'Tanya Fox' },
    { name: 'Hellen Schmidt' },
  ]
  const [selected, setSelected] = useState(people[0])


  const connectWallet = async () => {
    try{
        const provider = new ethers.providers.Web3Provider(window.ethereum);           
        await provider.send("eth_requestAccounts", []);
        const signer = provider.getSigner(account);
        setProvider(signer);
        setAccount(await signer.getAddress())
        setConnected(true);
    }
    catch(err){
        alert(err.message);
    }
  }

  const swapQuote = async () => {
    
    const params = {
        // Not all token symbols are supported. The address of the token can be used instead.
        sellToken: 'DAI',
        buyToken: 'MATIC',
        // Note that the DAI token uses 18 decimal places, so `sellAmount` is `100 * 10^18`.
        sellAmount: '100000000000000000000',
    }

    const response = await fetch(
        `https://polygon.api.0x.org/swap/v1/quote?${qs.stringify(params)}`
    );

    console.log(await response.json());
  }

  swapQuote()

  return (
    <div className='p-10'>
      <Head>
        <title>Swap Dapp</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div>
        <div className='flex justify-between'>
          <h1>Swap Dapp</h1>
          <button onClick={connectWallet}>{!connected ? "Connect" : "connected"}</button>
        </div>

        <div className='flex flex-col items-center mt-28 gap-4'>
          <div className='flex gap-10'>
          <div className='mt-4'>
            From :
          </div>
          <div className="top-16 w-72">
            <Listbox value={selected} onChange={setSelected}>
              <div className="relative mt-1">
                <Listbox.Button className="relative w-full cursor-default rounded-lg bg-white py-2 pl-3 pr-10 text-left shadow-md focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-sm">
                  <span className="block truncate">{selected.name}</span>
                  <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                    <ChevronUpDownIcon
                      className="h-5 w-5 text-gray-400"
                      aria-hidden="true"
                    />
                  </span>
                </Listbox.Button>
                <Transition
                  as={Fragment}
                  leave="transition ease-in duration-100"
                  leaveFrom="opacity-100"
                  leaveTo="opacity-0"
                >
                  <Listbox.Options className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm">
                    {people.map((person, personIdx) => (
                      <Listbox.Option
                        key={personIdx}
                        className={({ active }) =>
                          `relative cursor-default select-none py-2 pl-10 pr-4 ${
                            active ? 'bg-amber-100 text-amber-900' : 'text-gray-900'
                          }`
                        }
                        value={person}
                      >
                        {({ selected }) => (
                          <>
                            <span
                              className={`block truncate ${
                                selected ? 'font-medium' : 'font-normal'
                              }`}
                            >
                              {person.name}
                            </span>
                            {selected ? (
                              <span className="absolute inset-y-0 left-0 flex items-center pl-3 text-amber-600">
                                <CheckIcon className="h-5 w-5" aria-hidden="true" />
                              </span>
                            ) : null}
                          </>
                        )}
                      </Listbox.Option>
                    ))}
                  </Listbox.Options>
                </Transition>
              </div>
            </Listbox>
            </div>
          </div>
          <button className='p-4 bg-blue-300 rounded-xl'>
            Swap
          </button>
        </div>
      </div>
    </div>
  )
}
