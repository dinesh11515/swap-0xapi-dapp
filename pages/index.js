import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { ethers } from 'ethers';
import Web3 from 'web3';
import qs from 'qs';
import { useState } from 'react';
import { Fragment} from 'react'
import { Listbox, Transition } from '@headlessui/react'
import { CheckIcon, ChevronUpDownIcon } from '@heroicons/react/20/solid'
import {abi} from "../constants/index";
import { BigNumber } from 'ethers';
export default function Home() {

  const [connected, setConnected] = useState(false);
  const [provider,setProvider] = useState(null);
  const [account,setAccount] = useState(null);

  const coins = [
    {name:"USDT",address:"0xc2132D05D31c914a87C6611C10748AEb04B58e8F" ,decimals:6},
    {name:"DAI",address:"0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063" ,decimals:18},
  ]
  const [selected, setSelected] = useState(coins[0])
  console.log(account)

  const networks = {
    polygon: {
      chainId: `0x${Number(137).toString(16)}`,
      chainName: "Polygon",
      nativeCurrency: {
        name: "MATIC",
        symbol: "MATIC",
        decimals: 18
      },
      rpcUrls: ["https://polygon-rpc.com"],
      blockExplorerUrls: ["https://polygonscan.com/"]
    }
}

  const connectWallet = async () => {
    try{
        const provider = new ethers.providers.Web3Provider(window.ethereum);           
        await provider.send("eth_requestAccounts", []);
        const signer = provider.getSigner(account);
        if(await signer.getChainId() != 137){
          await window.ethereum.request({
              method: "wallet_addEthereumChain",
              params: [
                  {
                      ...networks["polygon"]
                  }
              ]
          })
        }
        setProvider(signer);
        setAccount(await signer.getAddress())
        setConnected(true);
    }
    catch(err){
        alert(err.message);
    }
  }
  
  const swap = async () => {
    try{
      const ZERO_EX_ADDRESS = "0xdef1c0ded9bec7f1a1670819833240f027b25eff"
      const web3 = new Web3(Web3.givenProvider);

      let amount =  BigNumber.from(""+document.getElementById("amount").value * 10**selected.decimals);
      const params = {
          sellToken: selected.name,
          buyToken: 'MATIC',    
          sellAmount: amount,
          takerAddress: account,
      }
      const contract = new web3.eth.Contract(abi,selected.address);
      const tx = await contract.methods.approve(
        ZERO_EX_ADDRESS,
        amount,
      )
      .send({ from: account })
      .then(tx => {
          console.log("tx: ", tx)
      });

      const response = await fetch(
          `https://polygon.api.0x.org/swap/v1/quote?${qs.stringify(params)}`
      );
      
      const receipt = await web3.eth.sendTransaction(swapQuoteJSON);
      console.log("receipt: ", receipt);
    }
    catch(err){
      alert(err.message);
    }
  }


  return (
    <div className='p-10'>
      <Head>
        <title>Swap Dapp</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div>
        <div className='px-48 flex justify-between'>
          <h1>Swap Dapp</h1>
          <button className="p-3 bg-blue-600 rounded-md text-white" onClick={connectWallet}>{!connected ? "Connect" : "Connected"}</button>
        </div>

        <div className='flex flex-col items-center mt-28 gap-4'>
          <div className='flex gap-10'>
          <div className='mt-4'>
            From :
          </div>
          <div className="top-16 w-72">
            <Listbox value={selected} onChange={setSelected}>
              <div className="relative mt-1">
                <Listbox.Button className="relative w-full cursor-default rounded-lg bg-white py-2 pl-3 pr-10 text-left shadow-md focus:outline-none focus-visible:border-indigo-500 focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75 focus-visible:ring-offset-2 focus-visible:ring-offset-orange-300 sm:text-sm">
                  <span className="block truncate">{selected.name}</span>
                  <span className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
                    <ChevronUpDownIcon
                      className="h-5 w-5 text-gray-400"
                      aria-hidden="true"
                    />
                  </span>
                </Listbox.Button>
                <Transition
                  as={Fragment}
                  leave="transition ease-in duration-100"
                  leaveFrom="opacity-100"
                  leaveTo="opacity-0"
                >
                  <Listbox.Options className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm">
                    {coins.map((person, personIdx) => (
                      <Listbox.Option
                        key={personIdx}
                        className={({ active }) =>
                          `relative cursor-default select-none py-2 pl-10 pr-4 ${
                            active ? 'bg-amber-100 text-amber-900' : 'text-gray-900'
                          }`
                        }
                        value={person}
                      >
                        {({ selected }) => (
                          <>
                            <span
                              className={`block truncate ${
                                selected ? 'font-medium' : 'font-normal'
                              }`}
                            >
                              {person.name}
                            </span>
                            {selected ? (
                              <span className="absolute inset-y-0 left-0 flex items-center pl-3 text-amber-600">
                                <CheckIcon className="h-5 w-5" aria-hidden="true" />
                              </span>
                            ) : null}
                          </>
                        )}
                      </Listbox.Option>
                    ))}
                  </Listbox.Options>
                </Transition>
              </div>
            </Listbox>
            </div>
          </div>
          <input type="number" id="amount" placeholder='Enter Amount' className='m-2 ml-20 h-8'></input>
          <button className='p-4 bg-blue-300 rounded-xl' onClick={swap}>
            Swap
          </button>
      <iframe
        src="https://widget.onramper.com?color=266677&apiKey=pk_test_5WfrOwKkrYSETDi1QHfzFZ8rji33wJSjYtuXMdoin380"
        height="660px"
        width="482px"
        title="Onramper widget"
        frameBorder="0"
        allow="accelerometer; autoplay; camera; gyroscope; payment"
      >
      </iframe>
        </div>
      </div>
    </div>
  )
}
